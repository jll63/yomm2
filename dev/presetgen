#!/usr/bin/env python3

from dataclasses import dataclass, field
import json
import sys
from typing import Any


@dataclass
class ToolChain:
    generator: str
    compilers: list[str]
    configure_presets: dict = field(default_factory=dict)


TOOLCHAINS = {
    "ninja": ToolChain("Ninja Multi-Config", "clang++ g++ c++ cl".split()),
    "msbuild": ToolChain(
        "Visual Studio 17 2022",
        ["cl"],
        {"condition": {"type": "equals", "lhs": "${hostSystemName}", "rhs": "Windows"}},
    ),
}
GENERATORS = {"ninja": "Ninja Multi-Config", "msbuild": "Visual Studio 17 2022"}
COMPILER_VERSIONS = {
    "clang++": "18 19 20".split(),
    "g++": "11 12 13".split(),
    "c++": [""],
    "cl": [""],
}
CONFIGURATIONS = {"dbg": "Debug", "rel": "Release", "reldbg": "RelWithDebInfo"}


def join(*args):
    return "-".join((arg for arg in args if arg))


presets = {
    "version": 6,
    "cmakeMinimumRequired": {"major": 3, "minor": 21, "patch": 0},
    "configurePresets": [
        {
            "name": join(build_system, compiler, version),
            "generator": tool_chain.generator,
            "toolchainFile": "${sourceDir}/vcpkg/scripts/buildsystems/vcpkg.cmake",
            "binaryDir": "${sourceDir}/builds/${presetName}",
            "cacheVariables": {
                "CMAKE_TOOLCHAIN_FILE": "$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake",
                "CMAKE_CXX_COMPILER": join(compiler, version),
                "CMAKE_INSTALL_PREFIX": "${sourceDir}/install/${presetName}",
                "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                "YOMM2_ENABLE_EXAMPLES": "ON",
                "YOMM2_ENABLE_TESTS": "ON",
                "YOMM2_ENABLE_BENCHMARKS": "ON",
            },
            **tool_chain.configure_presets,
        }
        for build_system, tool_chain in TOOLCHAINS.items()
        for compiler in tool_chain.compilers
        for version in COMPILER_VERSIONS[compiler]
    ],
    "buildPresets": [
        {
            "name": "build-" + join(build_system, compiler, version, config),
            "configurePreset": join(build_system, compiler, version),
            "configuration": CONFIGURATIONS[config],
        }
        for build_system, tool_chain in TOOLCHAINS.items()
        for compiler in tool_chain.compilers
        for version in COMPILER_VERSIONS[compiler]
        for config in CONFIGURATIONS
    ],
    "testPresets": [
        {
            "name": "test-" + join(build_system, compiler, version, config),
            "configurePreset": join(build_system, compiler, version),
            "configuration": CONFIGURATIONS[config],
        }
        for build_system, tool_chain in TOOLCHAINS.items()
        for compiler in tool_chain.compilers
        for version in COMPILER_VERSIONS[compiler]
        for config in CONFIGURATIONS
    ],
}

json.dump(presets, indent=4, fp=sys.stdout)
